expandurl() { curl -sIL -m 1 $1 2>&1 | awk '/^location/ {print $2}' | tail -n1; }

function certchain() {
	# Usage: certchain
    # Display PKI chain-of-trust for a given domain
    # GistID: https://gist.github.com/joshenders/cda916797665de69ebcd
    if [[ "$#" -ne 1 ]]; then
        echo "Usage: ${FUNCNAME} <ip|domain[:port]>"
        return 1
    fi

    local host_port="$1"

    if [[ "$1" != *:* ]]; then
        local host_port="${1}:443"
    fi

    openssl \
        s_client -connect "${host_port}" </dev/null 2>/dev/null \
        | grep -E '\ (s|i):'
}

function mux() {
	if [ -z "$1" ]; then
		tmux a || tmux
	else
		if [ "$1" == "console" -o "$1" == "vim" ]; then
			tmux -L console -f ~/.tmux-alternative.conf a -t $1 || tmux -L console -f ~/.tmux-alternative.conf new -s $1
		elif [[ "$1" == vscode* || "$1" == vscode* ]]; then
			tmux -L vscode -f ~/.tmux.light.conf a -t $1 || tmux -L vscode -f ~/.tmux.light.conf new -s $1
		else
			tmux a -t $1 || tmux new -s $1
		fi
	fi
}

fixssh() {
	for key in SSH_AUTH_SOCK SSH_CONNECTION SSH_CLIENT; do
		if (tmux show-environment | grep "^${key}" > /dev/null); then
			value=`tmux show-environment | grep "^${key}" | sed -e "s/^[A-Z_]*=//"`
			export ${key}="${value}"
		fi
	done
}

function pretty_csv {
	column -t -s';' | less -F -S -X -K
}

function csv_cols {
	head -n1 | tr ';' '\n' | cat -n
}

function pp_history {
	paste -sd '#\n' ~/.bash_eternal_history | awk -F"#" '{d=$2 ; $2="";print strftime("%Y-%m-%d %T",d)" "$0}'
}

function spellcheck {
	java -jar $HOME/Downloads/software/LanguageTool-4.9-SNAPSHOT/languagetool-commandline.jar -l en-US $1
}

bib2unix () { if [ $# -gt 0 ]; then cat "$@"; else cat; fi | tr "@\n" "\n\0" | sed "2,\$s/^/@/"; }
unix2bib () { tr -d "\n" | tr "\0" "\n"; }

resolve_redirect () { curl -ILs -o /dev/null -w %{url_effective} "$1"; echo; }

ggb() { git grep -n "$@" | while IFS=: read i j k; do git blame -f -L $j,$j $i; done }

getlast() {
    fc -ln "$1" "$1" | sed '1s/^[[:space:]]*//'
}

rememberthis() {
	LOGBOOK=~/LOGBOOK
	if [ -n "$1" ]; then
		echo "# $@" >> $LOGBOOK
	fi
	date '+%y-%m-%d %H:%M:%S' >> $LOGBOOK
    getlast >> $LOGBOOK
	echo >> $LOGBOOK
}

user_confirm() {
	read -r -p "${1:-Are you sure? [y/N]} " response
	case "$response" in
		[Yy]|[Yy][Ee][Ss])
			true
			;;
		*)
			false
			;;
		esac
}

repo-clean() {
	if [ -z "$1" -o "$1" != "-f" ]; then
		user_confirm "Reset all branches and discard all changes?" || return
	fi

	git reset --hard
	repo sync -d || ( repo forall -i 'product-cube' -c 'git rebase --abort' ; repo sync -d )
	repo forall -i 'product-cube' -c 'git reset --hard ; git clean -fdx || echo "$REPO_PROJECT failed to clean"'
	repo abandon --all
}

